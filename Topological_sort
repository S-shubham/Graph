// Program to perform topological sort


#include<bits/stdc++.h>
using namespace std;


void addedge(vector<int> adj[],int s,int d)
{
	adj[s].push_back(d);
}


void Print(stack<int> s)
{
	cout<<"\nThe topological sort of the graph is : ";
	while(!s.empty())
	{
		cout<<" "<<s.top()<<" ";
		s.pop();
	}
}


void DFSutil(vector<int> adj[],int n,bool visited[],int src,stack<int> &s)
{
	visited[src]=1;
	vector<int> :: iterator itr;
	for(itr=adj[src].begin();itr!=adj[src].end();itr++)
	{
		if(visited[*itr]==0)
		DFSutil(adj,n,visited,*itr,s);
	}
	s.push(src);
}


void DFS(vector<int> adj[],int n)
{
	bool visited[n];
	for(int i=0;i<n;i++)
	visited[i]=0;
	static stack<int>s;
	
	for(int i=0;i<n;i++)
	if(visited[i]==0)
	DFSutil(adj,n,visited,i,s);
	
	Print(s);
}



int main()
{
	int n=6;
	vector<int> adj[n];
//	addedge(adj,0,1);
//	addedge(adj,0,4);
//	addedge(adj,1,2);
//	addedge(adj,1,3);
//	addedge(adj,3,2);
//	addedge(adj,4,3);
//	//addedge(adj,3,0);
	addedge(adj,5, 2);
    addedge(adj,5, 0);
    addedge(adj,4, 0);
    addedge(adj,4, 1);
    addedge(adj,2, 3);
    addedge(adj,3, 1);
	
	cout<<"\nPrinting the graph : ";
	for(int i=0;i<n;i++)
	{
		vector<int> :: iterator itr;
		for(itr=adj[i].begin();itr!=adj[i].end();++itr)
		cout<<" "<<*itr;
		cout<<"\n ";
	}
	
	cout<<"\nStarting DFS on the graph  ";
	DFS(adj,n);
	
}
