// To detect a cycle in a graph using DFS and special array of Instack
// This is a directed graph   
#include<bits/stdc++.h>  
using namespace std;   
             
void addedge(vector<int> adj[],int s,int d)
{   
	adj[s].push_back(d);
}  

bool DFS_cycle(vector<int> adj[],int n)
{
	bool visited[n];
	bool instack[n];
	for(int i=0;i<n;i++)
	visited[i]=instack[i]=0;
	
	stack<int>s;
	s.push(0);
	visited[0]=instack[0]=1;
	while(!s.empty())
	{
		int curr=s.top();
		vector<int>:: iterator itr;
		int flag=1;
		for(itr=adj[curr].begin();itr!=adj[curr].end();++itr)
		{
			if(visited[*itr]==0)
			{
				s.push(*itr);
				visited[*itr]=instack[*itr]=1;
				flag=0;
				break;
			}
			else if(instack[*itr])
			{
				cout<<"\nCycle found between "<<curr<<" and "<<*itr;
				return 1;
			}
		}
		if(flag)
		{
			instack[s.top()]=0;
			s.pop();
		}
	}
	return 0;
}

Print_graph(vector<int>adj[],int n)
{
		cout<<"\n Printing the graph ";
	for(int i=0;i<n;i++)
	{
		vector <int> :: iterator itr;
		cout<<"\nNeighbors for node "<<i <<" ";
		for(itr=adj[i].begin();itr!=adj[i].end();++itr)
		{
			cout<<*itr<<" ";
		}
	}
}

int main()
{
	int n=5;
	vector<int> adj[n];
	addedge(adj,0,1);
	addedge(adj,0,4);
	addedge(adj,1,2);
	addedge(adj,1,3);
	addedge(adj,3,2);
	addedge(adj,4,3);
	// If the below edge is added then it will form cycle
	// To test remove the comments 
	//addedge(adj,3,0);
	
	//The graph looks like this 
	Print_graph(adj,n);
	
	
	cout<<"\nCalling function to check for cycle in graph ";
	if(DFS_cycle(adj,n))
	cout<<"\n There is a cycle in the graph  ";
	else
	cout<<"\nThere is no cycle in the graph ";	
	 
}
