// Program to find cycle in an undirected graph
// While DFS, if you find a node that has already been visited, and parent is not current node then cycle
// for edge (x,y) if y is already visited but parent[y]!=x then it's a cycle

#include<bits/stdc++.h>
using namespace std;
  
   
void addedge(vector<int> adj[],int s,int d)
{
	adj[s].push_back(d);
	adj[d].push_back(s);
}

bool DFS_cycle(vector<int> adj[],int n)
{
	bool visited[n];
	int parent[n];
	
	for(int i=0;i<n;i++)
	{
		visited[i]=0;
		parent[i]=NULL;
	}
	
	stack<int>s;
	s.push(0);
	visited[0]=1;
	
	while(!s.empty())
	{
		int cur=s.top();
		vector<int>:: iterator itr;
		int flag=1;
		for(itr=adj[cur].begin();itr!=adj[cur].end();itr++)
		{
			if(visited[*itr]==0)
			{
				s.push(*itr);
				visited[*itr]=1;
				parent[*itr]=cur;
				flag=0;
				break;
			}
			else if(visited[*itr] && parent[*itr]!=cur)
			{
				cout<<"\nError Cycle found!!!!";
				return 1;
			}
		}
		if(flag)
		s.pop();
	}
	return 0;
}

int main()
{
	int n=5;
	vector<int> adj[n];
	addedge(adj,0,1);
	addedge(adj,0,4);
	addedge(adj,1,2);
	addedge(adj,1,3);
	addedge(adj,3,2);
	addedge(adj,4,3);
	// If the below edge is added then it will form cycle
	// To test remove the comments 
	//addedge(adj,3,0);
	
	cout<<"\nCalling function to check for cycle in graph ";
	if(DFS_cycle(adj,n))
	cout<<"\n There is a cycle in the graph  ";
	else
	cout<<"\nThere is no cycle in the graph ";	
	
}
