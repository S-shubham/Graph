//Program to find cycle in a directed graph using colors
// we are using three colors
// white="undiscovered node"
// gray="Dicovered and under processing"
// black="processed node"

#include<bits/stdc++.h>
using namespace std;


void addedge(vector<int> adj[],int s,int d)
{
	adj[s].push_back(d);
}

bool DFS_cycle(vector<int> adj[],int n)
{
	
	char color[n];
	for(int i=0;i<n;i++)
	color[i]='w';
	
	stack<int> s;
	s.push(0);
	
	while(!s.empty())	
	{
		int cur=s.top();
		vector<int>:: iterator itr;
		int flag=1;
		
		for(itr=adj[cur].begin();itr!=adj[cur].end();itr++)
		{
			if(color[*itr]=='w')
			{
				s.push(*itr);
				color[*itr]='g';
				flag=0;
				break;
			}
			else if(color[*itr]=='g')
			{
				cout<<"\ncycle found !!!!!";
				return 1;
			}
		}
		
		if(flag)
		{
			color[s.top()]='b';
			s.pop();
		}
		
	}
	return 0;
}



int main()
{
	int n=5;
	vector<int> adj[n];
	addedge(adj,0,1);
	addedge(adj,0,4);
	addedge(adj,1,2);
	addedge(adj,1,3);
	addedge(adj,3,2);
	addedge(adj,4,3);
	// If the below edge is added then it will form cycle
	// To test remove the comments 
	//addedge(adj,3,0);
	
	cout<<"\nCalling function to check for cycle in graph ";
	if(DFS_cycle(adj,n))
	cout<<"\n There is a cycle in the graph  ";
	else
	cout<<"\nThere is no cycle in the graph ";	
	
}
